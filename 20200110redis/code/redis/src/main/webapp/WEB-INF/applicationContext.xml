<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 第一步 配置DataSource对象 class - 只要是DataSource的实现类都可以 -->
	<!-- 加载别的配置文件 -->
	<context:property-placeholder
		location="classpath:jdbc.properties" />
	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="url" value="${url}"></property>
		<property name="username" value="${username_}"></property>
		<property name="password" value="${password}"></property>
		<property name="driverClassName" value="${driver}"></property>
		<property name="maxTotal" value="${maxTotal}"></property>
	</bean>
	
	<!-- 第二步 创建SqlSessionFactory   
		该配置的class对应的是一个FactoryBean类 ，该id对应的对象是SqlSessionFactoryBean对象的getObject方法返回的对象
	 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 设置mybatis配置文件的路径 可选的 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置mapper.xml文件的路径
			可以省略 默认mapper和mapper映射文件 同名同包
		 -->
		<!-- <property name="mapperLocations" value="classpath:com/aowin/dao/*Mapper.xml"></property> -->
	</bean>
	
	<!--  第三步 创建Mapper接口的代理对象
		创建的对象的名字 都是接口名首字母变小写
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 设置mapper接口所在的包 -->
		<property name="basePackage" value="com.aowin.dao"></property>
	</bean>
	
	<!-- 第四步  创建Service -->
	<context:component-scan base-package="com.aowin.service.impl"></context:component-scan>
	
	<!-- 第五步 配置事务 -->
	<!-- 配置事务管理器对象 该对象负责事务的开启 提交 以及回滚 关闭的操作 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 创建一个事务的拦截器 实际就是一个围绕通知 -->
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<!-- 设置事务管理 器属性 -->
		<property name="transactionManager" ref="transactionManager"></property>
		<!-- 
			设置事务的特性
				包括方法名 和 传播行为在 TransactionDefinition接口中定义的
				
				key 对应需要添加事务的方法名称 可以使用正则表示
		 -->
		 <property name="transactionAttributes">
		 	<props>
		 		<prop key="update*">PROPAGATION_REQUIRED</prop>
		 		<prop key="delete*">PROPAGATION_REQUIRED</prop>
		 		<prop key="insert*">PROPAGATION_REQUIRED</prop>
		 	</props>
		 </property>
	</bean>
	
	<!-- 配置代理 -->
	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames" value="*ServiceImpl"></property>
		<property name="interceptorNames" value="transactionInterceptor"></property>
	</bean>
	
	
	<!-- 创建  StringRedisTemplate-->
	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="connectionFactory"></property>
	</bean>
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="localhost"></property>
		<property name="port" value="6379"></property>
		<property name="password" value="123456"></property>
	</bean>
	
</beans>
